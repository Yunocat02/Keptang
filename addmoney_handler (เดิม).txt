use actix_web::{web, HttpResponse, Responder,post};
use serde::{Serialize, Deserialize};
use log::{debug, info};
use serde_json::json;

use crate::models::moneylist::*;

// สร้าง struct ใหม่ที่มีเฉพาะส่วนที่คุณต้องการส่ง
#[derive(Serialize, Deserialize)]
struct UserdataUpgate {
    id: i32,
}

#[derive(Serialize, Deserialize)]
struct PostMoneyRequest {
    user_data: UserdataUpgate,
    dataitem: Moneylist,
}
// POST /money: สำหรับเพิ่มข้อมูลรายการรายรับรายจ่ายใหม่
#[post("/money/add/income")]
async fn post_money_income(input_data: web::Json<PostMoneyRequest>) -> impl Responder {

    // ค่าเริ่มต้น
    let mut userdata = input_data.into_inner();

    // สมมุติให้
    if userdata.user_data.id==40956 {    
        userdata.dataitem.list_id = 3;
        userdata.dataitem.description = "แม่ให้".to_string();
        userdata.dataitem.date = "2023-03-15".to_string();
        userdata.dataitem.amount = 100;
        userdata.dataitem.types = "income".to_string();
    }

    info!("post money");
    debug!("post: ✅");

    // สร้างโครงสร้างข้อมูลสำหรับรวมผลลัพธ์
     #[derive(Serialize, Deserialize)]
     struct CombinedResponse {
       //  total: Userdata,
         items: Moneylist,
         text: String,
     }
 
     let combined_response = CombinedResponse {
        // total: money_total,
         items: userdata.dataitem,
         text: "ทำการเพิ่มข้อมูลละเด้อ".to_string(),
     };
     
     let response_body = json!(combined_response);

    // HttpResponse::Ok().json(response_body)   ถ้าตัวนี้จะเป็น Status Code 200
     HttpResponse::Created().json(response_body)    // ถ้าตัวนี้จะเป็น Status Code 201

}
#[post("/money/add/expense")]
async fn post_money_expense(input_data: web::Json<PostMoneyRequest>) -> impl Responder {
    
    // ค่าเริ่มต้น
    let mut userdata = input_data.into_inner();

    // สมมุติให้
    if userdata.user_data.id==40956 {    
        userdata.dataitem.list_id = 5;
        userdata.dataitem.description = "เลี้ยงข้าวสาว".to_string();
        userdata.dataitem.date = "2023-03-15".to_string();
        userdata.dataitem.amount = 100;
        userdata.dataitem.types = "expense".to_string();
    }

    info!("post money");
    debug!("post: ✅");

    // สร้างโครงสร้างข้อมูลสำหรับรวมผลลัพธ์
     #[derive(Serialize)]
     struct CombinedResponse {
       //  total: Userdata,
         items: Moneylist,
         text: String,
     }
 
     let combined_response = CombinedResponse {
        // total: money_total,
         items: userdata.dataitem,
         text: "ทำการเพิ่มข้อมูลละเด้อ".to_string(),
     };
     
     let response_body = json!(combined_response);

     // HttpResponse::Ok().json(response_body)   ถ้าตัวนี้จะเป็น Status Code 200
     HttpResponse::Created().json(response_body)    // ถ้าตัวนี้จะเป็น Status Code 201
}